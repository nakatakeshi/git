#!/usr/bin/perl 
use strict;
use warnings;

use Getopt::Long;
use Pod::Usage;

my $from;
my $to;
my $branch;
my $dry_run;

GetOptions (
    "from=s"   => \$from,
    "to=s"     => \$to,
    "branch=s" => \$branch,
    "dry_run"  => \$dry_run,
) or pod2usage;
pod2usage if (!$branch || !$from || !$to);

my @commits = map {
    my $commit = $_;
    $commit =~ s/^commit //;
    $commit =~ s/\n//;
    $commit;
} grep {$_ =~ /^commit /} `git log $branch`;

@commits = slice_commits(
    commits => \@commits,
    from    => $from,
    to      => $to,    
);
error('no commits matched') unless(@commits);
@commits = reverse @commits;
for my $commit (@commits) {
    my $cmd = "git cherry-pick -n $commit";
    if ($dry_run){
        print "$cmd\n";
    } else {
        system($cmd);
    }
}

sub slice_commits {
    my %args = @_;
    my @sliced_commits;
    my $mached = 0;
    for my $commit (@{$args{commits}}) {
        next unless ($commit eq $args{to} || $mached);
        $mached = 1;
        push @sliced_commits, $commit;
        last if ($commit eq $args{from});
    }
    return @sliced_commits;
}

sub error {
    my $msg = shift;
    print "$msg\n";
    exit;
}

__END__

=head1 NAME

git_chp - git cherry-pick tool

=head1 SYNOPSIS

git_chp [options] 

 Options:
   --branch   git branch name
   --from     git from (older) commit 
   --to       git to   (younger) commit
   --dry_run  only print git cherry-pick commands

=head1 DESCRIPTION

this script helps you to merge some git branche's commits to git current branch.
you can give branch, from commit , to commit options you want to merge. 

=cut
